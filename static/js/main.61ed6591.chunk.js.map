{"version":3,"sources":["empulse.png","varis.jpg","Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Team","style","styles","container","src","img","maintext","logo","React","Component","position","minWidth","textAlign","top","left","transform","backgroundColor","opacity","width","button","color","borderRadius","border","fontWeight","borderBottom","borderTop","padding","fontSize","App","path","component","Home","exact","headercontainer","alt","nav","navA","href","target","icon","zIndex","height","marginLeft","display","right","textDecoration","p","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,6RCKtBC,E,uKAEb,OACI,yBAAKC,MAAOC,EAAOC,WACf,yBAAKC,IAAKC,IAAKJ,MAAOC,EAAOG,MAC7B,yBAAKJ,MAAOC,EAAOI,UACf,yBAAKL,MAAOC,EAAOK,KAAMH,IAAKG,Y,GANhBC,IAAMC,WAalCP,EAAS,CACXC,UAAW,CACPO,SAAU,WACVC,SAAU,UAEdL,SAAU,CACNM,UAAW,SACXF,SAAU,WACVG,IAAK,MACLC,KAAM,MACNC,UAAW,yBAEfV,IAAK,CACDW,gBAAiB,QACjBC,QAAS,KACTC,MAAO,QAEXX,KAAM,CACFW,MAAO,SAEXC,OAAQ,CACJH,gBAAiB,eACjBI,MAAO,QACPC,aAAc,OACdC,OAAQ,OACRC,WAAY,OACZC,aAAc,yBACdC,UAAW,yBACXC,QAAS,MACTC,SAAU,SCxCGC,E,uKAGjB,OACE,kBAAC,IAAD,KACI,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,WAAWC,UAAWC,EAAMC,OAAK,KAEjD,4BAAQ/B,MAAOC,EAAO+B,iBACpB,yBAAK7B,IAAKG,IAAMN,MAAOC,EAAOK,KAAM2B,IAAI,iBACxC,yBAAKjC,MAAOC,EAAOiC,KACjB,uBAAGlC,MAAOC,EAAOkC,KAAMC,KAAK,YAA5B,QACA,uBAAGpC,MAAOC,EAAOkC,KAAME,OAAO,UAA9B,iBACA,uBAAGrC,MAAOC,EAAOkC,KAAMC,KAAK,iBAA5B,cACA,2BAAG,kBAAC,IAAD,CAAepC,MAAOC,EAAOqC,QAChC,uBAAGF,KAAK,8EAA8EC,OAAO,UAAS,kBAAC,IAAD,CAAarC,MAAOC,EAAOqC,e,GAf5G/B,IAAMC,WAuBjCP,EAAS,CACb+B,gBAAiB,CACfO,OAAQ,EACR9B,SAAU,WACV+B,OAAQ,OACRzB,gBAAiB,gBACjBE,MAAO,OACPL,IAAK,EACLF,SAAU,UAEZJ,KAAM,CACJG,SAAU,WACVQ,MAAO,QACPwB,WAAY,KACZ7B,IAAK,SAEPsB,IAAM,CACJzB,SAAU,WACViC,QAAS,OACT9B,IAAK,GACL+B,MAAO,KACP1B,MAAO,SAETkB,KAAO,CACLS,eAAgB,OAChBlB,SAAU,OACVP,MAAO,QACPsB,WAAY,QAEdI,EAAG,CACDnB,SAAU,SAEZY,KAAO,CACLnB,MAAO,QACPO,SAAU,GACVe,WAAY,SCrDIK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.61ed6591.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/empulse.bc7eb582.png\";","module.exports = __webpack_public_path__ + \"static/media/varis.0a3f0910.jpg\";","import React from 'react';\nimport './App.css'\nimport img from './varis.jpg'\nimport logo from './empulse.png'\n\nexport default class Team extends React.Component {\n    render() {\n        return (\n            <div style={styles.container}>\n                <img src={img} style={styles.img}></img>\n                <div style={styles.maintext}>\n                    <img style={styles.logo} src={logo}></img>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst styles = {\n    container: {\n        position: 'relative',\n        minWidth: '1000px'\n    },\n    maintext: {\n        textAlign: 'center',\n        position: 'absolute', \n        top: '50%', \n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n    },\n    img: {\n        backgroundColor: 'black',\n        opacity: '.9',\n        width: '100%'\n    },\n    logo: {\n        width: '600px'\n    },\n    button: {\n        backgroundColor: 'rgb(150,0,0)',\n        color: 'white',\n        borderRadius: '20px',\n        border: 'none',\n        fontWeight: 'bold',\n        borderBottom: '3px solid rgb(100,0,0)',\n        borderTop: '3px solid rgb(200,0,0)',\n        padding: '8px',\n        fontSize: '15px',\n    }\n}","import React from 'react';\nimport {Route, Switch, BrowserRouter} from 'react-router-dom'\nimport InstagramIcon from '@material-ui/icons/Instagram';\nimport YouTubeIcon from '@material-ui/icons/YouTube';\nimport logo from './empulse.png'\nimport Home from './Home.js'\n\nexport default class App extends React.Component {\n  \n  render() {\n    return (\n      <BrowserRouter>\n          <Switch>\n            <Route path=\"/empulse\" component={Home} exact/>\n          </Switch>\n        <header style={styles.headercontainer}>\n          <img src={logo} style={styles.logo} alt=\"empulse logo\"></img>\n          <nav style={styles.nav}>\n            <a style={styles.navA} href=\"/empulse\">HOME</a>\n            <a style={styles.navA} target=\"_blank\">ASSETTO CORSA</a>\n            <a style={styles.navA} href='/empulse/team'>THE GARAGE</a>\n            <a><InstagramIcon style={styles.icon}></InstagramIcon></a>\n            <a href=\"https://www.youtube.com/channel/UCA2BhFhrsyvPXxEuUuQpBMw?view_as=subscriber\" target=\"_blank\"><YouTubeIcon style={styles.icon}></YouTubeIcon></a>\n          </nav>\n        </header>\n      </BrowserRouter>\n    );\n  }\n}\n\nconst styles = {\n  headercontainer: {\n    zIndex: 2,\n    position: 'absolute',\n    height: '60px',\n    backgroundColor: 'rgb(0,0,0,.8)',\n    width: '100%',\n    top: 0,\n    minWidth: '1000px'\n  },\n  logo: {\n    position: 'relative',\n    width: '135px',\n    marginLeft: '5%',\n    top: '-35px'\n  },\n  nav : {\n    position: 'absolute',\n    display: 'flex',\n    top: 20,\n    right: '3%',\n    width: '550px',\n  },\n  navA : {\n    textDecoration: 'none',\n    fontSize: '17px',\n    color: 'white',\n    marginLeft: '35px'\n  },\n  p: {\n    fontSize: '400px'\n  },\n  icon : {\n    color: 'white',\n    fontSize: 20,\n    marginLeft: '35px',\n  },\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}